import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import ProfileAvatar from './ProfileAvatar';
import finderLogo from './assets/finder-logo.svg';
import { buildApiUrl } from './utils/api';

const domainOptions = [
  "All",
  "Cross-Domain",
  "Customer & Commercial Strategy",
  "Agency Strategy",
  "Marketing Strategy",
  "Commerce Strategy",
  "Pricing & Sales Strategy",
  "Service Strategy",
  "Innovation & Product Strategy"
];

const typeOptions = [
  "All",
  "Proposal / POV",
  "CS&D Operations",
  "Domain / Industry Operations",
  "Other"
];

const statusOptions = [
  "All",
  "Open",
  "Closed", 
  "Applied",
  "Not Interested"
];

export default function FindOpportunities() {
  const [opps, setOpps] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [domain, setDomain] = useState('All');
  const [type, setType] = useState('All');
  const [status, setStatus] = useState('All');
  const [showNotInterested, setShowNotInterested] = useState(true);
  const [selectedOpportunity, setSelectedOpportunity] = useState(null);
  const [showOpportunityModal, setShowOpportunityModal] = useState(false);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [selectedProfile, setSelectedProfile] = useState(null);
  const [currentUserName, setCurrentUserName] = useState('');
  const navigate = useNavigate();
  const userEmail = localStorage.getItem('finder_email') || '';

  useEffect(() => {
    // Fetch both opportunities and employees
    Promise.all([
      fetch(buildApiUrl('/opportunities')).then(res => res.json()),
      fetch(buildApiUrl('/employees')).then(res => res.json())
    ])
      .then(([opportunitiesData, employeesData]) => {
        console.log('Fetched opportunities:', opportunitiesData);
        console.log('Fetched employees:', employeesData);
        
        if (opportunitiesData.success) {
          // Get any local edits from localStorage
          const localEdits = JSON.parse(localStorage.getItem('finder_local_edits') || '{}');
          
          // Apply local edits to opportunities
          const updatedOpportunities = opportunitiesData.opportunities.map((opp, index) => {
            const localEdit = localEdits[index];
            return localEdit ? { ...opp, ...localEdit } : opp;
          });
          
          setOpps(updatedOpportunities);
        }
        
        const allEmployees = employeesData.employees || employeesData || [];
        setEmployees(allEmployees);
        
        // Find current user's name
        const currentUser = allEmployees.find(emp => 
          (emp.email || '').trim().toLowerCase() === userEmail.trim().toLowerCase()
        );
        if (currentUser) {
          setCurrentUserName(currentUser.name || '');
        }
      })
      .catch(err => {
        console.error('Error fetching data:', err);
        setOpps([]);
        setEmployees([]);
      });
  }, []);

  // Create email to name mapping
  const emailToName = {};
  employees.forEach(emp => {
    emailToName[emp.email] = emp.name;
  });

  const handleApply = async (oppId) => {
    try {
      const res = await fetch(buildApiUrl(`/opportunities/${oppId}/apply`), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: userEmail })
      });
      
      if (res.ok) {
        alert('Application submitted successfully!');
        setShowOpportunityModal(false);
        // Refresh opportunities
        const opportunitiesRes = await fetch(buildApiUrl('/opportunities'));
        const opportunitiesData = await opportunitiesRes.json();
        if (opportunitiesData.success) {
          // Apply local edits when refreshing
          const localEdits = JSON.parse(localStorage.getItem('finder_local_edits') || '{}');
          const updatedOpportunities = opportunitiesData.opportunities.map((opp, index) => {
            const localEdit = localEdits[index];
            return localEdit ? { ...opp, ...localEdit } : opp;
          });
          setOpps(updatedOpportunities);
        }
      } else {
        alert('Failed to submit application');
      }
    } catch (err) {
      console.error('Error applying:', err);
      alert('Error submitting application');
    }
  };

  const handleMarkNotInterested = async (oppId) => {
    try {
      const res = await fetch(buildApiUrl(`/opportunities/${oppId}/not_interested`), {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: userEmail })
      });
      
      if (res.ok) {
        alert('Marked as not interested');
        setShowOpportunityModal(false);
        // Refresh opportunities
        const opportunitiesRes = await fetch(buildApiUrl('/opportunities'));
        const opportunitiesData = await opportunitiesRes.json();
        if (opportunitiesData.success) {
          // Apply local edits when refreshing
          const localEdits = JSON.parse(localStorage.getItem('finder_local_edits') || '{}');
          const updatedOpportunities = opportunitiesData.opportunities.map((opp, index) => {
            const localEdit = localEdits[index];
            return localEdit ? { ...opp, ...localEdit } : opp;
          });
          setOpps(updatedOpportunities);
        }
      } else {
        alert('Failed to mark as not interested');
      }
    } catch (err) {
      console.error('Error marking not interested:', err);
      alert('Error marking as not interested');
    }
  };

  const handleViewProfile = async (email) => {
    try {
      const res = await fetch(buildApiUrl('/employees'));
      const data = await res.json();
      const employees = data.employees || data || [];
      const profile = employees.find(emp => 
        (emp.email || '').trim().toLowerCase() === email.trim().toLowerCase()
      );
      
      if (profile) {
        setSelectedProfile(profile);
        setShowProfileModal(true);
      }
    } catch (err) {
      console.error('Error fetching profile:', err);
    }
  };

  let filteredOpps = opps;
  
  // Apply status filter
  if (status !== 'All') {
    filteredOpps = filteredOpps.filter(o => {
      if (status === 'Open') {
        return o.status !== 'closed';
      } else if (status === 'Closed') {
        return o.status === 'closed';
      } else if (status === 'Applied') {
        return o.applied && o.applied.includes(userEmail);
      } else if (status === 'Not Interested') {
        return o.not_interested && o.not_interested.includes(userEmail);
      }
      return true;
    });
  } else {
    // If "All" is selected, show all opportunities including closed ones
    // (don't filter out closed opportunities)
  }
  
  // Filter out not interested opportunities if the toggle is off (and status is not "Not Interested" or "Applied")
  if (!showNotInterested && status !== 'Not Interested' && status !== 'Applied') {
    filteredOpps = filteredOpps.filter(o => 
      !(o.not_interested && o.not_interested.includes(userEmail))
    );
  }
  
  if (domain !== 'All') {
    filteredOpps = filteredOpps.filter(o => o.domain === domain);
  }
  if (type !== 'All') {
    filteredOpps = filteredOpps.filter(o => o.type === type);
  }

  return (
    <div className="min-h-screen bg-blue-50 font-sans">
      {/* Opportunity Details Modal */}
      {showOpportunityModal && selectedOpportunity && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              {/* Header */}
              <div className="flex justify-between items-start mb-6">
                <div className="flex-1">
                  <h2 className="text-2xl font-bold text-gray-800 mb-2">{selectedOpportunity.title}</h2>
                  <div className="flex items-center gap-4">
                    {selectedOpportunity.status === 'closed' ? (
                      <span className="px-3 py-1 bg-red-500 text-white text-sm rounded-full">
                        Closed
                      </span>
                    ) : (
                      <span className="px-3 py-1 bg-green-500 text-white text-sm rounded-full">
                        Open
                      </span>
                    )}
                    <span className="text-blue-600 font-medium">
                      Posted by: <span 
                        className="cursor-pointer hover:text-blue-800 underline transition-colors"
                        onClick={() => handleViewProfile(selectedOpportunity.email)}
                      >
                        {emailToName[selectedOpportunity.email] || 'Unknown User'}
                      </span>
                    </span>
                  </div>
                </div>
                <button
                  onClick={() => setShowOpportunityModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>

              {/* Opportunity Details */}
              <div className="space-y-4 mb-6">
                <div>
                  <h3 className="font-semibold text-gray-700 mb-2">Description</h3>
                  <p className="text-gray-600">{selectedOpportunity.description}</p>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Domain</h3>
                    <p className="text-gray-600">{selectedOpportunity.domain}</p>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Type</h3>
                    <p className="text-gray-600">{selectedOpportunity.type}</p>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Duration</h3>
                    <p className="text-gray-600">{selectedOpportunity.startDate} to {selectedOpportunity.endDate}</p>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Hours per Week</h3>
                    <p className="text-gray-600">{selectedOpportunity.hoursPerWeek}</p>
                  </div>
                </div>

                {selectedOpportunity.roles && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-2">Roles</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedOpportunity.roles.map((role, idx) => (
                        <span key={idx} className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded">
                          {role}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {selectedOpportunity.skills && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-2">Skills</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedOpportunity.skills.map((skill, idx) => (
                        <span key={idx} className="px-2 py-1 bg-green-100 text-green-800 text-sm rounded">
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="border-t pt-6">
                {/* Show Edit button if current user posted this opportunity and it's active */}
                {selectedOpportunity.email && selectedOpportunity.email.toLowerCase() === userEmail.toLowerCase() && selectedOpportunity.status !== 'closed' ? (
                  <div className="text-center">
                    <button
                      onClick={() => {
                        // Navigate to edit via dashboard
                        setShowOpportunityModal(false);
                        navigate('/dashboard');
                      }}
                      className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium"
                    >
                      Edit this Opportunity
                    </button>
                  </div>
                ) : selectedOpportunity.applied && selectedOpportunity.applied.includes(userEmail) ? (
                  <div className="text-center">
                    <span className="px-6 py-3 bg-gray-400 text-white rounded-lg">
                      Already Applied
                    </span>
                  </div>
                ) : selectedOpportunity.not_interested && selectedOpportunity.not_interested.includes(userEmail) ? (
                  <div className="text-center">
                    <span className="px-6 py-3 bg-gray-400 text-white rounded-lg">
                      Marked as Not Interested
                    </span>
                  </div>
                ) : (
                  <div className="flex justify-center gap-4">
                    <button
                      onClick={() => handleApply(selectedOpportunity.id)}
                      className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium"
                    >
                      Apply for this Opportunity
                    </button>
                    <button
                      onClick={() => handleMarkNotInterested(selectedOpportunity.id)}
                      className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium"
                    >
                      Mark not interested
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Profile Modal */}
      {showProfileModal && selectedProfile && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[70]">
          <div className="bg-white rounded-lg max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              {/* Header */}
              <div className="flex justify-between items-start mb-6">
                <h2 className="text-2xl font-bold text-gray-800">Profile Details</h2>
                <button
                  onClick={() => setShowProfileModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>

              {/* Profile Content */}
              <div className="space-y-4">
                {/* Profile Picture */}
                <div className="flex justify-center mb-6">
                  {(() => {
                    const savedPicture = localStorage.getItem(`profile_picture_${selectedProfile.email}`);
                    if (savedPicture) {
                      return (
                        <img 
                          src={savedPicture} 
                          alt="Profile" 
                          className="w-24 h-24 rounded-full object-cover border-4 border-blue-100"
                        />
                      );
                    } else {
                      // Generate initials and color
                      const name = selectedProfile.name || 'Unknown User';
                      const initials = name.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase();
                      const colors = ['bg-red-400', 'bg-blue-400', 'bg-green-400', 'bg-yellow-400', 'bg-purple-400', 'bg-pink-400', 'bg-indigo-400'];
                      const colorIndex = name.length % colors.length;
                      return (
                        <div className={`w-24 h-24 rounded-full ${colors[colorIndex]} flex items-center justify-center text-white text-xl font-bold border-4 border-blue-100`}>
                          {initials}
                        </div>
                      );
                    }
                  })()}
                </div>

                <div>
                  <h3 className="font-semibold text-gray-700 mb-1">Name</h3>
                  <p className="text-gray-600">{selectedProfile.name || 'Not specified'}</p>
                </div>
                
                <div>
                  <h3 className="font-semibold text-gray-700 mb-1">Email</h3>
                  <p className="text-gray-600">{selectedProfile.email}</p>
                </div>

                {selectedProfile.role && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Role</h3>
                    <p className="text-gray-600">{selectedProfile.role}</p>
                  </div>
                )}

                {selectedProfile.domain && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Domain</h3>
                    <p className="text-gray-600">{selectedProfile.domain}</p>
                  </div>
                )}

                {selectedProfile.industry && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Industry</h3>
                    <p className="text-gray-600">{selectedProfile.industry}</p>
                  </div>
                )}

                {selectedProfile.department && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Department</h3>
                    <p className="text-gray-600">{selectedProfile.department}</p>
                  </div>
                )}

                {selectedProfile.location && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Location</h3>
                    <p className="text-gray-600">{selectedProfile.location}</p>
                  </div>
                )}

                {selectedProfile.skills && selectedProfile.skills.length > 0 && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-2">Skills</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedProfile.skills.map((skill, idx) => (
                        <span key={idx} className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded">
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {selectedProfile.bio && (
                  <div>
                    <h3 className="font-semibold text-gray-700 mb-1">Bio</h3>
                    <p className="text-gray-600">{selectedProfile.bio}</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      <header className="bg-white px-8 py-4 shadow flex items-center justify-between">
        <div className="flex items-center">
          <img src={finderLogo} alt="Finder Logo" className="h-8" />
        </div>
        <nav className="flex-1 flex justify-center items-center space-x-6 font-medium text-gray-700">
          <span className="cursor-pointer" onClick={() => navigate('/dashboard')}>Home</span>
          <span className="text-blue-600 cursor-pointer" onClick={() => navigate('/find-opportunities')}>Find Opportunity</span>
          <button
            className="border px-4 py-2 rounded-xl text-white bg-blue-600 flex items-center"
            onClick={() => navigate('/post-opportunity')}
          >
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4"></path></svg>
            Post an Opportunity
          </button>
        </nav>
        <div className="flex items-center ml-6">
          <ProfileAvatar userName={currentUserName} userEmail={userEmail} size="sm" />
        </div>
      </header>
      <div className="max-w-6xl mx-auto mt-10">
        <h1 className="text-3xl md:text-4xl font-extrabold text-gray-800 mb-8 text-center flex items-center justify-center gap-3">
          <img src={finderLogo} alt="FInder" className="h-6 md:h-8 inline-block -mt-1" />
          your next opportunity here!
        </h1>
        <div className="flex gap-4 mb-8">
          <div>
            <label className="block text-gray-600 font-medium mb-1">Domain</label>
            <select value={domain} onChange={e => setDomain(e.target.value)} className="px-4 py-2 border border-gray-300 rounded-xl">
              {domainOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
            </select>
          </div>
          <div>
            <label className="block text-gray-600 font-medium mb-1">Type of FI</label>
            <select value={type} onChange={e => setType(e.target.value)} className="px-4 py-2 border border-gray-300 rounded-xl">
              {typeOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
            </select>
          </div>
          <div>
            <label className="block text-gray-600 font-medium mb-1">Status</label>
            <select value={status} onChange={e => setStatus(e.target.value)} className="px-4 py-2 border border-gray-300 rounded-xl">
              {statusOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
            </select>
          </div>
          <div className="flex items-end">
            <label className="flex items-center space-x-2 cursor-pointer">
              <input
                type="checkbox"
                checked={showNotInterested}
                onChange={e => setShowNotInterested(e.target.checked)}
                className="rounded border-gray-300"
              />
              <span className="text-gray-600 font-medium">Show not interested</span>
            </label>
          </div>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredOpps.map((opp, i) => {
            const hasApplied = opp.applied && opp.applied.includes(userEmail);
            const isNotInterested = opp.not_interested && opp.not_interested.includes(userEmail);
            return (
              <div
                key={i}
                className={`bg-white p-6 rounded-xl shadow cursor-pointer hover:shadow-lg transition-shadow ${
                  isNotInterested ? 'opacity-50 bg-gray-100' : ''
                }`}
                onClick={() => {
                  setSelectedOpportunity(opp);
                  setShowOpportunityModal(true);
                }}
              >
                <div className="flex justify-between items-start mb-3">
                  <h3 className={`font-bold text-lg flex-1 ${isNotInterested ? 'text-gray-500' : ''}`}>
                    {opp.title}
                  </h3>
                  <div className="flex gap-1">
                    {opp.status === 'closed' ? (
                      <span className="px-2 py-1 bg-red-500 text-white text-xs rounded-full">
                        Closed
                      </span>
                    ) : (
                      <span className="px-2 py-1 bg-green-500 text-white text-xs rounded-full">
                        Open
                      </span>
                    )}
                    {hasApplied && (
                      <span className="px-2 py-1 bg-blue-500 text-white text-xs rounded-full">
                        Applied
                      </span>
                    )}
                    {isNotInterested && (
                      <span className="px-2 py-1 bg-gray-500 text-white text-xs rounded-full">
                        Not Interested
                      </span>
                    )}
                  </div>
                </div>
                
                <p className={`text-gray-600 text-sm mb-4 line-clamp-2 ${
                  isNotInterested ? 'text-gray-400' : ''
                }`}>
                  {opp.description}
                </p>
                
                <div className={`text-right text-xs text-gray-500 ${
                  isNotInterested ? 'text-gray-400' : ''
                }`}>
                  Posted by: {emailToName[opp.email] || 'Unknown User'}
                </div>
              </div>
            );
          })}
          {filteredOpps.length === 0 && (
            <div className="col-span-full text-center py-16">
              <div className="max-w-md mx-auto">
                <div className="text-6xl mb-4">🔍</div>
                <h3 className="text-xl font-semibold text-gray-700 mb-2">Great Things Are Coming!</h3>
                <p className="text-gray-500 mb-6">
                  New opportunities are being added regularly. Check back soon or try adjusting your filters to discover more possibilities!
                </p>
                <button
                  onClick={() => navigate('/post-opportunity')}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors"
                >
                  Post an Opportunity
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
